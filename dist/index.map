{"version":3,"sources":["config/elements.ts","config/version.ts","helpers/array.ts","helpers/cells.ts","helpers/numbers.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export default [\n  {\n    name: \"blank\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"vertical\", \"rightAndDown\", \"upAndRight\"],\n        cellToTheLeft: [\"horizontal\", \"downAndRight\", \"upAndRight\"],\n      },\n    },\n    // space\n    value: \" \",\n  },\n  {\n    name: \"downAndRight\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"blank\", \"horizontal\", \"downAndRight\", \"rightAndUp\"],\n        cellToTheLeft: [\"horizontal\", \"downAndRight\", \"upAndRight\"],\n      },\n    },\n    // ╰\n    value: \"\\u2570\",\n  },\n  {\n    name: \"horizontal\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"vertical\", \"rightAndDown\", \"upAndRight\"],\n        cellToTheLeft: [\"blank\", \"vertical\", \"blank\", \"rightAndDown\", \"rightAndUp\"],\n      },\n    },\n    // ─\n    value: \"\\u2500\",\n  },\n  {\n    name: \"node\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"node\"],\n        cellToTheLeft: [\"node\"],\n      },\n    },\n    // ●\n    value: \"\\u25CF\",\n  },\n  {\n    name: \"rightAndDown\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"vertical\", \"rightAndDown\", \"upAndRight\"],\n        cellToTheLeft: [\"blank\", \"vertical\", \"rightAndDown\", \"rightAndUp\"],\n      },\n    },\n    // ╮\n    value: \"\\u256E\",\n  },\n  {\n    name: \"rightAndUp\",\n    rules:   {\n      validUnless: {\n        cellAbove: [\"blank\", \"horizontal\", \"downAndRight\", \"rightAndUp\"],\n        cellToTheLeft: [\"blank\", \"vertical\", \"rightAndDown\", \"rightAndUp\"],\n      },\n    },\n    // ╯\n    value: \"\\u256F\",\n  },\n  {\n    name: \"upAndRight\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"vertical\", \"rightAndDown\", \"upAndRight\"],\n        cellToTheLeft: [\"horizontal\", \"downAndRight\", \"upAndRight\"],\n      },\n    },\n    // ╭\n    value: \"\\u256D\",\n  },\n  {\n    name: \"vertical\",\n    rules: {\n      validUnless: {\n        cellAbove: [\"blank\", \"horizontal\", \"downAndRight\", \"rightAndUp\"],\n        cellToTheLeft: [\"horizontal\", \"downAndRight\", \"upAndRight\"],\n      },\n    },\n    // │\n    value: \"\\u2502\",\n  },\n];\n","export default \"1.0.0\";\n","export const randomValue = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n","export const cellToTheLeft = (currentGrid, elementRow, elementColumn) => {\n  return currentGrid[elementRow][elementColumn - 1];\n};\n\nexport const cellAbove = (currentGrid, elementRow, elementColumn) => {\n  if (!currentGrid[elementRow - 1]) { return; }\n  return currentGrid[elementRow - 1][elementColumn];\n};\n","export const takeAChance = (likelihood) => {\n  return Math.random() <= likelihood;\n};\n","import elementsConfig from \"./config/elements\";\nimport version from \"./config/version\";\nimport { randomValue } from \"./helpers/array\";\nimport { cellAbove, cellToTheLeft } from \"./helpers/cells\";\nimport { takeAChance } from \"./helpers/numbers\";\n\nconst defaultOptions = {\n  blank: { chance: 1 },\n  columns: 30,\n  downAndRight: { chance: 1 },\n  horizontal: { chance: 1 },\n  node: { chance: 1 },\n  rightAndDown: { chance: 1 },\n  rightAndUp: { chance: 1 },\n  rows: 5,\n  upAndRight: { chance: 1 },\n  vertical: { chance: 1 },\n};\n\nconst characterBySymbol = (characterSymbol) => {\n  return elementsConfig.find((element) => characterSymbol === element.value);\n};\n\nconst applyElementRules = (element, aboveName, leftName, options) => {\n  const { name, rules } = element;\n\n  if (rules.validUnless.cellAbove.indexOf(aboveName) > -1) { return false; }\n  if (rules.validUnless.cellToTheLeft.indexOf(leftName) > -1) { return false; }\n  if (!takeAChance(options[name].chance)) { return false; }\n\n  return true;\n};\n\nconst allowedCharacters = (charAbove, charLeft, options) => {\n  const aboveDefinition = characterBySymbol(charAbove);\n  const leftDefinition = characterBySymbol(charLeft);\n\n  let aboveName = \"\";\n  let leftName = \"\";\n\n  if (aboveDefinition) { aboveName = aboveDefinition.name; }\n  if (leftDefinition) { leftName = leftDefinition.name; }\n\n  return elementsConfig.filter(\n    (element) => applyElementRules(element, aboveName, leftName, options),\n  );\n};\n\nexport default {\n  generate: (options = {}) => {\n    const output = [];\n    const mergedOptions = Object.assign({}, defaultOptions, options);\n\n    for (let row = 0; row < mergedOptions.rows; row++) {\n      if (!output[row]) { output.push([]); }\n\n      for (let column = 0; column < mergedOptions.columns; column++) {\n        if (!output[row][column]) { output[row].push([]); }\n        const above = cellAbove(output, row, column);\n        const left = cellToTheLeft(output, row, column);\n        const characterForCell = randomValue(\n          allowedCharacters(above, left, mergedOptions),\n        );\n        output[row][column] = characterForCell ? characterForCell.value : \" \";\n      }\n    }\n\n    let outputString = \"\";\n\n    for (const row of output) {\n      outputString += row.join(\"\") + \"\\n\";\n    }\n\n    return outputString;\n  },\n  version,\n};\n"]}